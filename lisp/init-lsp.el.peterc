;;; init-lsp.el ---                                  -*- lexical-binding: t; -*-

;; Copyright (C) 2019

;; Author:  <peter.linyi@DESKTOP-PMTGUNT>
;; Keywords:

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:

(mark-time-here)

(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package lsp-mode
  ;; :custom (lsp-completion-provider :none) ;; we use Corfu!
  ;; :hook ((lsp-completion-mode . my/lsp-mode-setup-completion)
  ;;        (lsp-completion-mode . (lambda ()
  ;;                                 (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
  ;;                                       '(flex)))))
  :ensure t
  :init
  (setq lsp-keymap-prefix "C-c l"
        lsp-keep-workspace-alive nil
        lsp-signature-auto-activate nil
        lsp-modeline-code-actions-enable nil
        ;; lsp-modeline-code-actions-enable t
        lsp-modeline-diagnostics-enable nil
        ;; lsp-modeline-diagnostics-enable t
	lsp-modeline-workspace-status-enable nil
	lsp-headerline-breadcrumb-enable nil

        lsp-enable-file-watchers nil
        lsp-enable-folding nil
        ;; lsp-enable-folding t
        lsp-enable-symbol-highlighting nil
        lsp-enable-text-document-color nil

        lsp-enable-indentation nil
	lsp-enable-on-type-formatting nil
        lsp-auto-guess-root nil
        ;; lsp-prefer-capf t

	lsp-enable-on-type-formatting nil)
  :config
  (with-no-warnings
    ;; Enable `lsp-mode' in sh/bash/zsh
    (defun my-lsp-bash-check-sh-shell (&rest _)
      (and (eq major-mode 'sh-mode)
           (memq sh-shell '(sh bash zsh))))
    (advice-add #'lsp-bash-check-sh-shell :override #'my-lsp-bash-check-sh-shell)

    ;; Only display icons in GUI
    (defun my-lsp-icons-get-symbol-kind (fn &rest args)
      (when (and petmacs-icon (display-graphic-p))
	(apply fn args)))
    (advice-add #'lsp-icons-get-by-symbol-kind :around #'my-lsp-icons-get-symbol-kind)))

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :init (setq lsp-ui-sideline-show-diagnostics nil
	      lsp-ui-sideline-enable nil
	      lsp-ui-sideline-show-code-actions nil
              lsp-ui-sideline-ignore-duplicate t
	      lsp-ui-doc-enable nil
	      lsp-ui-doc-delay 0.1
	      lsp-ui-doc-border (face-foreground 'font-lock-comment-face nil t)
              lsp-ui-imenu-colors `(,(face-foreground 'font-lock-keyword-face)
				    ,(face-foreground 'font-lock-string-face)
				    ,(face-foreground 'font-lock-constant-face)
				    ,(face-foreground 'font-lock-variable-name-face)))
  )

(use-package lsp-treemacs
  :ensure t
  :after lsp-mode
  :bind (:map lsp-mode-map
              ("C-<f8>" . lsp-treemacs-errors-list)
              ("M-<f8>" . lsp-treemacs-symbols)
              ("s-<f8>" . lsp-treemacs-java-deps-list))
  :init (lsp-treemacs-sync-mode 1)
  (setq
   lsp-treemacs-deps-position-params
   `((side . right)
     (slot . 1)
     (window-width . 32))
   lsp-treemacs-symbols-position-params
   `((side . right)
     (slot . 2)
     (window-width . 32)))
  :config
  (with-eval-after-load 'ace-window
    (when (boundp 'aw-ignored-buffers)
      (push 'lsp-treemacs-symbols-mode aw-ignored-buffers)
      (push 'lsp-treemacs-java-deps-mode aw-ignored-buffers))))

(when sys/macp
  (use-package lsp-sourcekit
    :ensure t
    :init (setq lsp-sourcekit-executable
                "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/sourcekit-lsp")))


;;; python
(use-package lsp-pyright
  :ensure t
  :preface
  ;; Use yapf to format
  (defun lsp-pyright-format-buffer ()
    (interactive)
    (when (and (executable-find "yapf") buffer-file-name)
      (call-process "yapf" nil nil nil "-i" buffer-file-name)))
  :hook ((python-mode . (lambda ()
			  (require 'lsp-pyright)
			  (add-hook 'after-save-hook #'lsp-pyright-format-buffer t t)))
	 (pyvenv-mode . (lambda () (lsp-deferred))))
  :init
  ;; too much noise in "real" projects
  (setq lsp-pyright-typechecking-mode "basic"
	lsp-pyright-venv-path (file-truename "~/miniconda3/envs")))

;;; java

(use-package lsp-java
  :ensure t
  :hook (java-mode . (lambda ()
		       (require 'lsp-java)
		       (lsp-deferred)))
  :init
  (setq lsp-java-import-maven-enabled t
	lsp-java-implementations-code-lens-enabled t
	lsp-java-save-actions-organize-imports t
	;; latest jdtls requires java >= 11 to work
	lsp-java-java-path "/opt/jdk11/bin/java"
	lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Dsun.zip.disableMemoryMapping=true" "-Xmx6G" "-Xms100m")
	;; Runtime name must be one of: “J2SE-1.5”, “JavaSE-1.6”, “JavaSE-1.7”, “JavaSE-1.8” etc
	;; lsp-java-configuration-runtimes '[(:name "JavaSE-1.8"
	;; 				   :path "/opt/jdk/")
	;; 				  (:name "JavaSE-11"
	;; 				   :path "/opt/jdk11/"
	;; :default t)]
	lsp-java-folding-range-enabled t))

;;; scala
(use-package lsp-metals
  :ensure t)
(use-package consult-lsp
  :ensure t)

;; optional if you want which-key integration
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

(provide 'init-lsp)
(message "init-lsp loaded in '%.2f' seconds ..." (get-time-diff time-marked))
;;; init-lsp.el ends here
